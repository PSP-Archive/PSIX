#include "psix.h"

#define PSIX_DASHBOARD_TOP             34
#define PSIX_DASHBOARD_LEFT             6
#define PSIX_DASHBOARD_BOX_WIDTH       70
#define PSIX_DASHBOARD_BOX_HEIGHT      70
#define PSIX_DASHBOARD_ICON_WIDTH      26
#define PSIX_DASHBOARD_ICON_HEIGHT     33
#define PSIX_DASHBOARD_NUM_X            6
#define PSIX_DASHBOARD_NUM_Y            3
#define PSIX_DASHBOARD_TEXT_PAD         5
#define PSIX_DASHBOARD_MAX_TEXT_WIDTH  68

struct psix_dashboard_item *items[PSIX_DASHBOARD_NUM_Y][PSIX_DASHBOARD_NUM_X];

int psix_dashboard_state;
int psix_dashboard_show_overlay;
int psix_dashboard_selected_i;
int psix_dashboard_selected_j;
int psix_dashboard_selected_hidden_i;
int psix_dashboard_selected_hidden_j;
int psix_dashboard_visible;

int psix_dashboard_init()
{
  int i,j;
  for (i=0; i < PSIX_DASHBOARD_NUM_X; i++)
    for (j=0; j < PSIX_DASHBOARD_NUM_Y; j++)
      items[j][i] = 0;

  /* create an object for the icon overlay */
  sdi_new("dashboard_overlay");
  sdi_set_overlay("dashboard_overlay",1);
  sdi_set_enabled("dashboard_overlay",0);
  sdi_move_below("dashboard_overlay","info_window");

  /* make the first icon MY PSP */
  struct psix_dashboard_item my_psp;
  sprintf(my_psp.name,"My PSP");
  my_psp.path[0] = 0;
  sprintf(my_psp.img,"icon_mypsp");
  sprintf(my_psp.img_over,"icon_mypsp_over");
  my_psp.w = 26;
  my_psp.h = 33;
  psix_dashboard_add_item(&my_psp);

  /* scan ms0 for executables */
  psix_dashboard_scan_for_exec("ms0:/");

  psix_dashboard_selected_i = -1;
  psix_dashboard_selected_j = -1;

  psix_dashboard_show_overlay = 0;
  psix_dashboard_state = 1;
  psix_dashboard_visible = 1;

  return 0;
}

int psix_dashboard_add_item(struct psix_dashboard_item *new_item)
{
  /* find the first free space */
  int i,j;
  for (i=0; i < PSIX_DASHBOARD_NUM_X; i++)
    for (j=0; j < PSIX_DASHBOARD_NUM_Y; j++)
      if (!items[j][i])
	goto done;
 done:

  if (i == PSIX_DASHBOARD_NUM_X)
    return -1;

  /* copy the data */
  items[j][i] = malloc(sizeof(struct psix_dashboard_item));
  memcpy(items[j][i],new_item,sizeof(struct psix_dashboard_item));

  /* now add it to sdi to be drawn */
  char sdi_name[50],sdi_name2[50];
  sprintf(sdi_name,"dashboard_%d_%d",j,i);
  sdi_new(sdi_name);
  sdi_move_below(sdi_name,"dashboard_overlay");
  sdi_set_x(sdi_name,PSIX_DASHBOARD_LEFT+PSIX_DASHBOARD_BOX_WIDTH*i+(PSIX_DASHBOARD_BOX_WIDTH-new_item->w)/2);
  sdi_set_y(sdi_name,PSIX_DASHBOARD_TOP+PSIX_DASHBOARD_BOX_HEIGHT*j);
  sdi_copy_image(sdi_name,items[j][i]->img);
  sdi_set_enabled(sdi_name,1);

  /* add the corresponding text */
  sprintf(sdi_name2,"dashboard_%d_%d_t",j,i);
  sdi_new(sdi_name2);
  sdi_move_below(sdi_name2,"dashboard_overlay");
  sdi_print_wrap_compress(sdi_name2,"font_icon",new_item->name,50,1);
  sdi_set_x(sdi_name2,PSIX_DASHBOARD_LEFT+PSIX_DASHBOARD_BOX_WIDTH*i+(PSIX_DASHBOARD_BOX_WIDTH-sdi_get_width(sdi_name2))/2);
  sdi_set_y(sdi_name2,PSIX_DASHBOARD_TOP+PSIX_DASHBOARD_BOX_HEIGHT*j+sdi_get_height(sdi_name)+PSIX_DASHBOARD_TEXT_PAD);
  sdi_set_enabled(sdi_name2,1);
  //sdi_set_alpha(sdi_name2,0xA0);

  return 0;
}

int psix_dashboard_check_extension(char *filename,char *extension)
{
  char *last_dot=0,*dot=filename;

  while (*dot)
    {
      if (*dot == '.')
	last_dot = dot;
      dot++;
    }
  
  if (last_dot)
    {
      char name[256];
      strcpy(name,last_dot);
      int i;
      for (i=0;i < strlen(name);i++)
	name[i] = toupper(name[i]);
      if (!strcmp(name,extension))
	  return 1;
    }
  return 0;
}

void psix_dashboard_scan_for_exec(char *path)
{
  char buf[256];
  char tbuf[256];
  SceIoDirent dirent;
  int dd = sceIoDopen(path);

  memset(&dirent,0,sizeof(SceIoDirent));
  while (sceIoDread(dd,&dirent) > 0)
    {
      sprintf(buf,"%s%s%s",path,(path[strlen(path)-1]=='/')?"":"/",dirent.d_name);
      if (dirent.d_stat.st_attr & FIO_SO_IFDIR)
	{
	  /* we have a directory, now, if it isa a no %, but a corresponding % exists, we want to skip it */
	  if (dirent.d_name[strlen(dirent.d_name)-1] != '%')
	    {
	      sprintf(tbuf,"%s%%",buf);
	      SceIoStat stat;
	      if (sceIoGetstat(tbuf,&stat) >= 0)
		if (stat.st_attr & FIO_SO_IFDIR)
		  continue;
	    }

	  if (dirent.d_name[strlen(dirent.d_name)-1] != '.')
	    psix_dashboard_scan_for_exec(buf);
	}
      else if (dirent.d_stat.st_attr & FIO_SO_IFREG)	
	if (psix_dashboard_check_extension(dirent.d_name,".PBP"))
	  {
	    struct psix_pbp_read pbp_data;
	    struct psix_dashboard_item new_app;
	    memset(&new_app,0,sizeof(new_app));
	    psix_pbp_read(buf,&pbp_data);

	    /* we dont really need to see PSIX on the dash */
	    if (!strncmp(pbp_data.title,"PSIX",4))
	      continue;

	    /* cut out the KXPLOIT PSP-DEV team crap */
	    if (strlen(pbp_data.title) > 29)
	      if (strncmp(&pbp_data.title[strlen(pbp_data.title)-30]," KXPloit Boot by PSP-DEV Team",29))
		pbp_data.title[strlen(pbp_data.title)-29] = 0;

	    /* make sure it actually has a name */
	    if (strlen(pbp_data.title) == 0)
	      continue;

	    /* we dont want the space hack either */
	    if (pbp_data.title[0] == ' ')
	      continue;

	    strcpy(new_app.name,pbp_data.title);

	    /* now take care of the % business */
	    strcpy(tbuf,buf);
	    if (path[strlen(path)-1] == '%')
	      {
		strcpy(tbuf,path);
		tbuf[strlen(tbuf)-1] = 0;
		while (tbuf[strlen(tbuf)-1] == ' ')
		  tbuf[strlen(tbuf)-1] = 0;
		SceIoStat stat;
		if (sceIoGetstat(tbuf,&stat)>=0)
		  if (stat.st_attr & FIO_SO_IFDIR)
		    sprintf(buf,"%s%s%s",tbuf,(tbuf[strlen(tbuf)-2]=='/')?"":"/",dirent.d_name);
	      }

	    /* now finish up */
	    strcpy(new_app.path,buf);
	    sprintf(new_app.img,"icon_default");
	    sprintf(new_app.img_over,"icon_default_over");
	    new_app.w = 26;
	    new_app.h = 33;
	    psix_dashboard_add_item(&new_app);
	  }
	  
      memset(&dirent,0,sizeof(SceIoDirent));
    }

  sceIoDclose(dd);
}

void psix_dashboard_set_state(int state)
{
  switch(state)
    {
    case 1: psix_dashboard_show(); break;
    case 2: 
      psix_dashboard_hide();
      psix_umd_show();
      break;
    case 3:
      psix_umd_hide();
    }

  psix_dashboard_state = state;
  return;

  if (psix_dashboard_state == 1)
    {
      if (psix_dashboard_state != state)
	psix_dashboard_hide();
    }
  else
    if (state == 1)
      psix_dashboard_show();
  
  psix_dashboard_state = state;
}

void psix_dashboard_hide()
{
  /* run through the list of items and disable them */
  int i,j;
  for (i=0; i < PSIX_DASHBOARD_NUM_X; i++)
    for (j=0; j < PSIX_DASHBOARD_NUM_Y; j++)
      if (items[j][i])
	{
	  char buf[256];
	  sprintf(buf,"dashboard_%d_%d",j,i);
	  sdi_set_enabled(buf,0);
	  sprintf(buf,"dashboard_%d_%d_t",j,i);
	  sdi_set_enabled(buf,0);
	}
  if (psix_dashboard_show_overlay)
    sdi_set_enabled("dashboard_overlay",0);
  
  psix_dashboard_visible = 0;
}

void psix_dashboard_show()
{
  /* run through the list of items and disable them */
  int i,j;
  for (i=0; i < PSIX_DASHBOARD_NUM_X; i++)
    for (j=0; j < PSIX_DASHBOARD_NUM_Y; j++)
      if (items[j][i])
	{
	  char buf[256];
	  sprintf(buf,"dashboard_%d_%d",j,i);
	  sdi_set_enabled(buf,1);
	  sprintf(buf,"dashboard_%d_%d_t",j,i);
	  sdi_set_enabled(buf,1);
	}
  if (psix_dashboard_show_overlay && !psix_bottab_state)
    sdi_set_enabled("dashboard_overlay",1);

  psix_dashboard_visible = 1;
}

void psix_dashboard_cursor_moved()
{
  if (psix_dashboard_state == 2)
    {
      psix_umd_cursor_moved();
      return;
    }

  if (psix_dashboard_state != 1 || !psix_dashboard_visible || psix_bottab_state)
    return;

  int x = (int)psix_cursor_x;
  int y = (int)psix_cursor_y;

  int icon_left, icon_right;
  int icon_top, icon_bottom;

  int i = (x - PSIX_DASHBOARD_LEFT)/PSIX_DASHBOARD_BOX_WIDTH;
  int j = (y - PSIX_DASHBOARD_TOP)/PSIX_DASHBOARD_BOX_HEIGHT;

  icon_left = PSIX_DASHBOARD_LEFT + i*PSIX_DASHBOARD_BOX_WIDTH + (PSIX_DASHBOARD_BOX_WIDTH - PSIX_DASHBOARD_ICON_WIDTH)/2;
  icon_right = icon_left + PSIX_DASHBOARD_ICON_WIDTH;
  icon_top = PSIX_DASHBOARD_ICON_HEIGHT + j*PSIX_DASHBOARD_BOX_HEIGHT;
  icon_bottom = icon_top + PSIX_DASHBOARD_ICON_HEIGHT;

  if (x>=icon_left &&x<=icon_right && y>=icon_top && y<=icon_bottom && i < PSIX_DASHBOARD_NUM_X && j < PSIX_DASHBOARD_NUM_Y)
    {
      if (items[j][i] && psix_dashboard_selected_i != i && psix_dashboard_selected_j != j)
	{
	  if (psix_dashboard_selected_i != -1)
	      psix_dashboard_icon_set_overlay(psix_dashboard_selected_j,psix_dashboard_selected_i,0);

	  psix_dashboard_icon_set_overlay(j,i,1);
	  
	  psix_dashboard_selected_i = i;
	  psix_dashboard_selected_j = j; 
	}
    }
  else  
    if (psix_dashboard_selected_i != -1)
    {
      psix_dashboard_icon_set_overlay(psix_dashboard_selected_j,psix_dashboard_selected_i,0);
      psix_dashboard_selected_i = -1;
      psix_dashboard_selected_j = -1;
    }
}

void psix_dashboard_icon_set_overlay(int j, int i, int value)
{
  if (value)
    {
      sdi_copy_image("dashboard_overlay",items[j][i]->img_over);
      sdi_set_position("dashboard_overlay",PSIX_DASHBOARD_LEFT+i*PSIX_DASHBOARD_BOX_WIDTH+(PSIX_DASHBOARD_BOX_WIDTH-PSIX_DASHBOARD_ICON_WIDTH)/2,PSIX_DASHBOARD_TOP+j*PSIX_DASHBOARD_BOX_HEIGHT);
      sdi_set_enabled("dashboard_overlay",1);
    }
  else
      sdi_set_enabled("dashboard_overlay",0);

  psix_dashboard_show_overlay = value;
}

char psix_path[] = "ms0:/psp/game/psix/eboot.pbp";


void psix_dashboard_click()
{
  if (!psix_dashboard_visible)
    return;

  int x = psix_cursor_x;
  int y = psix_cursor_y;

  int icon_left, icon_right;
  int icon_top, icon_bottom;

  int i = (x - PSIX_DASHBOARD_LEFT)/PSIX_DASHBOARD_BOX_WIDTH;
  int j = (y - PSIX_DASHBOARD_TOP)/PSIX_DASHBOARD_BOX_HEIGHT;

  icon_left = PSIX_DASHBOARD_LEFT + i*PSIX_DASHBOARD_BOX_WIDTH + (PSIX_DASHBOARD_BOX_WIDTH - PSIX_DASHBOARD_ICON_WIDTH)/2;
  icon_right = icon_left + PSIX_DASHBOARD_ICON_WIDTH;
  icon_top = PSIX_DASHBOARD_ICON_HEIGHT + j*PSIX_DASHBOARD_BOX_HEIGHT;
  icon_bottom = icon_top + PSIX_DASHBOARD_ICON_HEIGHT;
  
  if (!(x>=icon_left &&x<=icon_right && y>=icon_top && y<=icon_bottom))
    return;

  if (i >= PSIX_DASHBOARD_NUM_X || j >= PSIX_DASHBOARD_NUM_Y || (i == 0 && j ==0))
    return;
  if (j == 0 && i == 0)
    {
      psix_launch_param.argp = psix_path;
      psix_launch_param.args = strlen(psix_launch_param.argp);
      psix_launch_param.key = NULL;
      psix_launch_param.size = sizeof(psix_launch_param) + psix_launch_param.args;
      psix_launch_path = psix_path;
      return;
    }


  if (items[j][i])
    {

      psix_launch_param.argp = items[j][i]->path;
      psix_launch_param.args = strlen(psix_launch_param.argp);
      psix_launch_param.key = NULL;
      psix_launch_param.size = sizeof(psix_launch_param) + psix_launch_param.args;
      psix_launch_path = items[j][i]->path;
    }
}
